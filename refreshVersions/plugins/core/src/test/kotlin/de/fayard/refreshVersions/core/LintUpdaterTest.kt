package de.fayard.refreshVersions.core

import de.fayard.refreshVersions.core.internal.LintUpdatingIssue
import de.fayard.refreshVersions.core.internal.attemptGettingLintXmlWithMissingRules
import io.kotest.matchers.shouldBe
import org.junit.jupiter.api.TestFactory
import testutils.junit.mapDynamicTest
import kotlin.test.Test
import kotlin.test.assertTrue

class LintUpdaterTest {

    private val testDataDir = testResources.resolve("lint-updater")

    @TestFactory
    fun `test lint updater`() = testDataDir.resolve("no-problem").listFiles { file ->
        file.isDirectory
    }!!.asList().mapDynamicTest { directory ->
        require(directory.isDirectory)
        val input = directory.resolve("input.xml").readText()
        val expected = directory.resolve("expected.xml").readText()
        val (updatedXml, _) = attemptGettingLintXmlWithMissingRules(lintXmlContent = input)
        (updatedXml ?: input).trim() shouldBe expected.trim()
    }

    @TestFactory
    fun `test updating lint files with one wrong severity`() =
        testDataDir.resolve("one-wrong-severity").listFiles { file ->
            file.isDirectory
        }!!.asList().mapDynamicTest { directory ->
            require(directory.isDirectory)
            val input = directory.resolve("input.xml").readText()
            val expected = directory.resolve("expected.xml").readText()
            val (updatedXml, problems) = attemptGettingLintXmlWithMissingRules(lintXmlContent = input)
            (updatedXml ?: input).trim() shouldBe expected.trim()
            problems.size shouldBe 1
            assertTrue(problems.single().issue is LintUpdatingIssue.UnexpectedSeverity)
        }

    @TestFactory
    fun `test updating lint files with two wrong severity`() =
        testDataDir.resolve("two-wrong-severity").listFiles { file ->
            file.isDirectory
        }!!.asList().mapDynamicTest { directory ->
            require(directory.isDirectory)
            val input = directory.resolve("input.xml").readText()
            val expected = directory.resolve("expected.xml").readText()
            val (updatedXml, problems) = attemptGettingLintXmlWithMissingRules(lintXmlContent = input)
            (updatedXml ?: input).trim() shouldBe expected.trim()
            problems.size shouldBe 2
            problems.forEach {
                assertTrue(it.issue is LintUpdatingIssue.UnexpectedSeverity)
            }
        }

    @Test
    fun `wrong root tag returns a problem`() {
        val input = """
            |<?xml version="1.0" encoding="UTF-8"?>
            |<mint>
            |    <!-- Generated by `./gradlew refreshVersions` to avoid errors when using _ as a version. -->
            |    <issue id="GradlePluginVersion" severity="ignore" />
            |    <issue id="GradleDependency" severity="ignore" />
            |</mint>
        """.trimMargin()
        val (updatedXml, problems) = attemptGettingLintXmlWithMissingRules(lintXmlContent = input)
        updatedXml shouldBe null
        problems.size shouldBe 1
        assertTrue(problems.single().issue is LintUpdatingIssue.ParsingFailure)
    }

    @Test
    fun `improper xml lint file returns a problem`() {
        val input = """
            |<?xml version="1.0" encoding="UTF-8"?>
            |<lint>
        """.trimMargin()
        val (updatedXml, problems) = attemptGettingLintXmlWithMissingRules(lintXmlContent = input)
        updatedXml shouldBe null
        problems.size shouldBe 1
        assertTrue(problems.single().issue is LintUpdatingIssue.ParsingFailure)
    }
}

